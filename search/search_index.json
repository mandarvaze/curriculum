{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction Welcome to the Vernacular tech team's onboarding curriculum. The curriculum is a set of guided exercises to help you get onboarded on our technology and make a move towards delivering high quality enterprise grade AI software. It is not a reference manual, nor is it a styleguide for our tech stack. There are four parts in the curriculum covering various aspects of building the kind of AI software we develop. We believe the skills developed in these will help you do your job better, irrespective of your team. Each part has various sections, each section has few exercises to do. These exercises might require you to read up some content which will be provided in the section itself. Note While there are few exercises that can be picked up independently, we recommend going through them sequentially. To get started, fork this repository under your github profile. Code snippet for starting with an exercise are provided in the ./exercises directory in the repository root. Once you are ready, go the first part on building .","title":"Introduction"},{"location":"index.html#introduction","text":"Welcome to the Vernacular tech team's onboarding curriculum. The curriculum is a set of guided exercises to help you get onboarded on our technology and make a move towards delivering high quality enterprise grade AI software. It is not a reference manual, nor is it a styleguide for our tech stack. There are four parts in the curriculum covering various aspects of building the kind of AI software we develop. We believe the skills developed in these will help you do your job better, irrespective of your team. Each part has various sections, each section has few exercises to do. These exercises might require you to read up some content which will be provided in the section itself. Note While there are few exercises that can be picked up independently, we recommend going through them sequentially. To get started, fork this repository under your github profile. Code snippet for starting with an exercise are provided in the ./exercises directory in the repository root. Once you are ready, go the first part on building .","title":"Introduction"},{"location":"building/index.html","text":"Building Welcome to the building curriculum. Here we work on basic building blocks of softwares. We will make shippable packages, CLI tools, APIs etc. Note Majority of our software is written in Python and Golang. You can use any of these languages to work on the exercises. When we provide any code snippet, we provide language tabs like below so you can work with your preferred langauge. Python if __name__ == \"__main__\" : print ( \"Hello world\" ) Go package main import \"fmt\" func main () { fmt . Println ( \"Hello world\" ) }","title":"Building"},{"location":"building/index.html#building","text":"Welcome to the building curriculum. Here we work on basic building blocks of softwares. We will make shippable packages, CLI tools, APIs etc. Note Majority of our software is written in Python and Golang. You can use any of these languages to work on the exercises. When we provide any code snippet, we provide language tabs like below so you can work with your preferred langauge. Python if __name__ == \"__main__\" : print ( \"Hello world\" ) Go package main import \"fmt\" func main () { fmt . Println ( \"Hello world\" ) }","title":"Building"},{"location":"building/01.html","text":"FFtrim Your first assignment is to build a command line tool named fftrim which replicates FFmpeg's media trimming capabilities. FFmpeg is versatile tool for media manipulation. If you work with speech data of any sort, you will be sleeping happily in nights knowing that FFmpeg exists. In fftrim , we want to minimally replicate audio trimming feature that works like the following: fftrim -i <input-file> -ss <start-time> -to <end-time> <output-file> fftrim -i <input-file> -ss <start-time> -t <duration> <output-file> # All time units are in seconds Few notes on the assignment: Your CLI tool should be installable via your language's standard method and provide a command in shell, post installation. fftrim should preserve the audio format and encoding. Do not call ffmpeg as subprocess. The idea is for you to understand as much as possible about audio data representation so try reading the input using a decoding library and work from there. Note Since this is merely an instructional program, don't put the package on public package indices like PyPI . Instead, just provide instructions on building and installing the package system wide for usage. Once you have built the package, run the test cases to ensure that your program does what it's supposed to do. You can run tests by running make test in the exercise root. Warning Tests for this exercise are not working as of now. You are encouraged to listen to the generated audios to see if the tool is working as expected. Also feel free to do a pull request for fixing the tests. Resources Few resources that you might want to follow for working on this: Python packaging and Poetry SoundFile cli and docopt Working with audio data","title":"FFtrim"},{"location":"building/01.html#fftrim","text":"Your first assignment is to build a command line tool named fftrim which replicates FFmpeg's media trimming capabilities. FFmpeg is versatile tool for media manipulation. If you work with speech data of any sort, you will be sleeping happily in nights knowing that FFmpeg exists. In fftrim , we want to minimally replicate audio trimming feature that works like the following: fftrim -i <input-file> -ss <start-time> -to <end-time> <output-file> fftrim -i <input-file> -ss <start-time> -t <duration> <output-file> # All time units are in seconds Few notes on the assignment: Your CLI tool should be installable via your language's standard method and provide a command in shell, post installation. fftrim should preserve the audio format and encoding. Do not call ffmpeg as subprocess. The idea is for you to understand as much as possible about audio data representation so try reading the input using a decoding library and work from there. Note Since this is merely an instructional program, don't put the package on public package indices like PyPI . Instead, just provide instructions on building and installing the package system wide for usage. Once you have built the package, run the test cases to ensure that your program does what it's supposed to do. You can run tests by running make test in the exercise root. Warning Tests for this exercise are not working as of now. You are encouraged to listen to the generated audios to see if the tool is working as expected. Also feel free to do a pull request for fixing the tests.","title":"FFtrim"},{"location":"building/01.html#resources","text":"Few resources that you might want to follow for working on this: Python packaging and Poetry SoundFile cli and docopt Working with audio data","title":"Resources"},{"location":"debug/python_code_debugging.html","text":"What is debugging? Debugging is an action of removing issues or potential errors that can cause your code to crash or have unexpected behavior. So this post is about ways to debug code. Programming allows you to think about thinking, and while debugging you learn learning. Here are some of the ways you can debug your code. Adding print statements or logger to your code Whenever writing code the best practice is to put enough print statements/loggers in the code so that if there are issues in they could be caught while the development process and get fixed. Here is an example of a piece of code with print statements def my_fact(numb) -> int: if numb is 1: return numb else: return numb * my_fact(numb - 1) if __name__ == '__main__': num = input(\"Enter the number you want to calculate factorial for: \") if isinstance(num, str): try: num = int(num) except ValueError as e: print(\"Unable to convert to integer, Exception: {}\".format(e)) else: print(\"Please input an Integer\") if isinstance(num, int): factorial = my_fact(num) print(\"Factorial is: {}\".format(factorial)) Another way to debug is adding loggers, one awesome library in python is Loguru, here is the same code snippet with loguru. from loguru import logger def my_fact(numb) -> int: if numb is 1: return numb else: return numb * my_fact(numb - 1) if __name__ == '__main__': num = input(\"Enter the number you want to calculate factorial for: \") if isinstance(num, str): try: num = int(num) except ValueError as e: logger.error(\"Unable to convert to integer, Exception: {}\".format(e)) else: logger.info(\"Please input an Integer\") if isinstance(num, int): factorial = my_fact(num) logger.debug(\"Factorial is: {}\".format(factorial)) The advantage to adding a logger is that you would know where the code is breaking and also most of the logger libraries have different levels of logging: info error debug Python PDB module The pdb module in python helps debug the source code. For python 2.7 and above there is a package called pdb which you can use for debugging your code. To use this you need to add import pdb; pdb.set_trace() to the code where you need to examine the variables and their value. This is just like adding a breakpoint to your code. A breakpoint is used for suspending the program execution, post that you can examine the code line by line. Following is the implementation of adding breakpoint: ... if isinstance(num, int): import pdb; pdb.set_trace() factorial = my_fact(num) Next, you need to run your code: python factorial.py Enter the number you want to calculate factorial for: 5 > /Users/dimplemathew/PycharmProjects/pythonProject2/factorial.py(23)<module>() -> factorial = my_fact(num) (Pdb) You will see something similar to \u261d\ufe0f in your terminal. It shows the path of the file along with the line number where the breakpoint is added. (Pdb) p num 5 Next to know the value of the variables you can use \u2018p to get the value. If you are using python 3 and above you need not import pdb instead just add a breakpoint() where every you want in your source code. Below is the implementation: ... if isinstance(num, int): breakpoint() factorial = my_fact(num) For further read, here is the link to the documentation","title":"What is debugging?"},{"location":"debug/python_code_debugging.html#what-is-debugging","text":"Debugging is an action of removing issues or potential errors that can cause your code to crash or have unexpected behavior. So this post is about ways to debug code. Programming allows you to think about thinking, and while debugging you learn learning. Here are some of the ways you can debug your code. Adding print statements or logger to your code Whenever writing code the best practice is to put enough print statements/loggers in the code so that if there are issues in they could be caught while the development process and get fixed. Here is an example of a piece of code with print statements def my_fact(numb) -> int: if numb is 1: return numb else: return numb * my_fact(numb - 1) if __name__ == '__main__': num = input(\"Enter the number you want to calculate factorial for: \") if isinstance(num, str): try: num = int(num) except ValueError as e: print(\"Unable to convert to integer, Exception: {}\".format(e)) else: print(\"Please input an Integer\") if isinstance(num, int): factorial = my_fact(num) print(\"Factorial is: {}\".format(factorial)) Another way to debug is adding loggers, one awesome library in python is Loguru, here is the same code snippet with loguru. from loguru import logger def my_fact(numb) -> int: if numb is 1: return numb else: return numb * my_fact(numb - 1) if __name__ == '__main__': num = input(\"Enter the number you want to calculate factorial for: \") if isinstance(num, str): try: num = int(num) except ValueError as e: logger.error(\"Unable to convert to integer, Exception: {}\".format(e)) else: logger.info(\"Please input an Integer\") if isinstance(num, int): factorial = my_fact(num) logger.debug(\"Factorial is: {}\".format(factorial)) The advantage to adding a logger is that you would know where the code is breaking and also most of the logger libraries have different levels of logging: info error debug Python PDB module The pdb module in python helps debug the source code. For python 2.7 and above there is a package called pdb which you can use for debugging your code. To use this you need to add import pdb; pdb.set_trace() to the code where you need to examine the variables and their value. This is just like adding a breakpoint to your code. A breakpoint is used for suspending the program execution, post that you can examine the code line by line. Following is the implementation of adding breakpoint: ... if isinstance(num, int): import pdb; pdb.set_trace() factorial = my_fact(num) Next, you need to run your code: python factorial.py Enter the number you want to calculate factorial for: 5 > /Users/dimplemathew/PycharmProjects/pythonProject2/factorial.py(23)<module>() -> factorial = my_fact(num) (Pdb) You will see something similar to \u261d\ufe0f in your terminal. It shows the path of the file along with the line number where the breakpoint is added. (Pdb) p num 5 Next to know the value of the variables you can use \u2018p to get the value. If you are using python 3 and above you need not import pdb instead just add a breakpoint() where every you want in your source code. Below is the implementation: ... if isinstance(num, int): breakpoint() factorial = my_fact(num) For further read, here is the link to the documentation","title":"What is debugging?"},{"location":"deploying/index.html","text":"Going Live Warning Work in Progress!","title":"Going Live"},{"location":"deploying/index.html#going-live","text":"Warning Work in Progress!","title":"Going Live"},{"location":"misc/index.html","text":"Miscellaneous Programming Topics Warning Work in Progress!","title":"Miscellaneous Programming Topics"},{"location":"misc/index.html#miscellaneous-programming-topics","text":"Warning Work in Progress!","title":"Miscellaneous Programming Topics"},{"location":"misc/np.html","text":"Miscellaneous non-programming Topics Warning Work in Progress!","title":"Miscellaneous non-programming Topics"},{"location":"misc/np.html#miscellaneous-non-programming-topics","text":"Warning Work in Progress!","title":"Miscellaneous non-programming Topics"}]}